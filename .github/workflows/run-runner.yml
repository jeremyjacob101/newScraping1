name: Run runner.py

on:
  workflow_dispatch:
    inputs:
      args:
        description: "Arguments to pass to runner.py (optional)"
        required: false
        default: ""
      debug:
        description: "Enable verbose logging (set -x)"
        type: boolean
        required: false
        default: false
  # schedule:
  #   - cron: "0 05 * * *"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 300
    concurrency:
      group: run-runner-${{ github.ref }}
      cancel-in-progress: false
    env:
      LOG_LEVEL: ERROR
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      TZ: Asia/Jerusalem

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Chrome (stable)
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Cache .venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Create venv and install deps (if needed)
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install --prefer-binary -r requirements.txt
          elif [ -f pyproject.toml ]; then
            pip install --prefer-binary .
          fi

      - name: Detect Chrome version
        id: chrome
        shell: bash
        run: |
          set -e
          if command -v google-chrome >/dev/null 2>&1; then
            ver=$(google-chrome --version | awk '{print $3}')
          elif command -v chromium-browser >/dev/null 2>&1; then
            ver=$(chromium-browser --version | awk '{print $2}')
          else
            ver="unknown"
          fi
          echo "version=$ver" >> "$GITHUB_OUTPUT"

      - name: Cache Selenium drivers
        uses: actions/cache@v4
        with:
          path: ~/.cache/selenium
          key: selenium-${{ runner.os }}-${{ steps.chrome.outputs.version }}

      - name: Debug env vars
        run: |
          echo "SUPABASE_URL: $SUPABASE_URL"
          echo "SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY:+set}"

      - name: Run runner.py (with secrets)
        env:
          OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          set -e
          if [ "${{ github.event.inputs.debug }}" = "true" ]; then set -x; fi
          . .venv/bin/activate
          python runner.py ${{ github.event.inputs.args }}
      
      - name: Upload failure artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: selenium-failure-artifacts
          path: utils/logger_artifacts/
